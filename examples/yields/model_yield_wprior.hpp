// Code generated by Stan version 2.18.0

#include <stan/model/model_header.hpp>

namespace model_yield_wprior_model_namespace {

using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;

static int current_statement_begin__;

stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "examples/yields/model_yield_wprior.stan");
    reader.add_event(59, 57, "end", "examples/yields/model_yield_wprior.stan");
    return reader;
}

class model_yield_wprior_model : public prob_grad {
private:
        int T_j;
        int J_max;
        int M_max;
        std::vector<matrix_d> S;
        matrix_d P;
public:
    model_yield_wprior_model(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, 0, pstream__);
    }

    model_yield_wprior_model(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, random_seed__, pstream__);
    }

    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        typedef double local_scalar_t__;

        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning

        current_statement_begin__ = -1;

        static const char* function__ = "model_yield_wprior_model_namespace::model_yield_wprior_model";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        try {
            // initialize data block variables from context__
            current_statement_begin__ = 2;
            context__.validate_dims("data initialization", "T_j", "int", context__.to_vec());
            T_j = int(0);
            vals_i__ = context__.vals_i("T_j");
            pos__ = 0;
            T_j = vals_i__[pos__++];
            check_greater_or_equal(function__, "T_j", T_j, 1);

            current_statement_begin__ = 3;
            context__.validate_dims("data initialization", "J_max", "int", context__.to_vec());
            J_max = int(0);
            vals_i__ = context__.vals_i("J_max");
            pos__ = 0;
            J_max = vals_i__[pos__++];
            check_greater_or_equal(function__, "J_max", J_max, 1);

            current_statement_begin__ = 4;
            context__.validate_dims("data initialization", "M_max", "int", context__.to_vec());
            M_max = int(0);
            vals_i__ = context__.vals_i("M_max");
            pos__ = 0;
            M_max = vals_i__[pos__++];
            check_greater_or_equal(function__, "M_max", M_max, 1);

            current_statement_begin__ = 5;
            validate_non_negative_index("S", "M_max", M_max);
            validate_non_negative_index("S", "J_max", J_max);
            validate_non_negative_index("S", "T_j", T_j);
            context__.validate_dims("data initialization", "S", "matrix_d", context__.to_vec(T_j,M_max,J_max));
            S = std::vector<Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> >(T_j, Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(M_max, J_max));
            vals_r__ = context__.vals_r("S");
            pos__ = 0;
            size_t S_j_2_max__ = J_max;
            size_t S_j_1_max__ = M_max;
            size_t S_k_0_max__ = T_j;
            for (size_t j_2__ = 0; j_2__ < S_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < S_j_1_max__; ++j_1__) {
                    for (size_t k_0__ = 0; k_0__ < S_k_0_max__; ++k_0__) {
                        S[k_0__](j_1__, j_2__) = vals_r__[pos__++];
                    }
                }
            }
            size_t S_i_0_max__ = T_j;
            for (size_t i_0__ = 0; i_0__ < S_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "S[i_0__]", S[i_0__], 0);
            }

            current_statement_begin__ = 6;
            validate_non_negative_index("P", "T_j", T_j);
            validate_non_negative_index("P", "M_max", M_max);
            context__.validate_dims("data initialization", "P", "matrix_d", context__.to_vec(T_j,M_max));
            P = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(T_j, M_max);
            vals_r__ = context__.vals_r("P");
            pos__ = 0;
            size_t P_j_2_max__ = M_max;
            size_t P_j_1_max__ = T_j;
            for (size_t j_2__ = 0; j_2__ < P_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < P_j_1_max__; ++j_1__) {
                    P(j_1__, j_2__) = vals_r__[pos__++];
                }
            }
            check_greater_or_equal(function__, "P", P, 0);


            // initialize transformed data variables
            // execute transformed data statements

            // validate transformed data

            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 10;
            validate_non_negative_index("a", "3", 3);
            validate_non_negative_index("a", "T_j", T_j);
            num_params_r__ += (3 * T_j);
            current_statement_begin__ = 11;
            validate_non_negative_index("sigma", "M_max", M_max);
            num_params_r__ += M_max;
            current_statement_begin__ = 12;
            validate_non_negative_index("sds", "T_j", T_j);
            num_params_r__ += T_j;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }

    ~model_yield_wprior_model() { }


    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        stan::io::writer<double> writer__(params_r__, params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;

        current_statement_begin__ = 10;
        if (!(context__.contains_r("a")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable a missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("a");
        pos__ = 0U;
        validate_non_negative_index("a", "3", 3);
        validate_non_negative_index("a", "T_j", T_j);
        context__.validate_dims("parameter initialization", "a", "matrix_d", context__.to_vec(3,T_j));
        Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> a(3, T_j);
        size_t a_j_2_max__ = T_j;
        size_t a_j_1_max__ = 3;
        for (size_t j_2__ = 0; j_2__ < a_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < a_j_1_max__; ++j_1__) {
                a(j_1__, j_2__) = vals_r__[pos__++];
            }
        }
        try {
            writer__.matrix_lub_unconstrain(-(1), 1, a);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable a: ") + e.what()), current_statement_begin__, prog_reader__());
        }

        current_statement_begin__ = 11;
        if (!(context__.contains_r("sigma")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable sigma missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("sigma");
        pos__ = 0U;
        validate_non_negative_index("sigma", "M_max", M_max);
        context__.validate_dims("parameter initialization", "sigma", "vector_d", context__.to_vec(M_max));
        Eigen::Matrix<double, Eigen::Dynamic, 1> sigma(M_max);
        size_t sigma_j_1_max__ = M_max;
        for (size_t j_1__ = 0; j_1__ < sigma_j_1_max__; ++j_1__) {
            sigma(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_lb_unconstrain(0, sigma);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable sigma: ") + e.what()), current_statement_begin__, prog_reader__());
        }

        current_statement_begin__ = 12;
        if (!(context__.contains_r("sds")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable sds missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("sds");
        pos__ = 0U;
        validate_non_negative_index("sds", "T_j", T_j);
        context__.validate_dims("parameter initialization", "sds", "vector_d", context__.to_vec(T_j));
        Eigen::Matrix<double, Eigen::Dynamic, 1> sds(T_j);
        size_t sds_j_1_max__ = T_j;
        for (size_t j_1__ = 0; j_1__ < sds_j_1_max__; ++j_1__) {
            sds(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_lb_unconstrain(0, sds);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable sds: ") + e.what()), current_statement_begin__, prog_reader__());
        }

        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }

    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }


    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(std::vector<T__>& params_r__,
                 std::vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {

        typedef T__ local_scalar_t__;

        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // dummy to suppress unused var warning

        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;
        try {
            stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);

            // model parameters
            current_statement_begin__ = 10;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> a;
            (void) a;  // dummy to suppress unused var warning
            if (jacobian__)
                a = in__.matrix_lub_constrain(-(1), 1, 3, T_j, lp__);
            else
                a = in__.matrix_lub_constrain(-(1), 1, 3, T_j);

            current_statement_begin__ = 11;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> sigma;
            (void) sigma;  // dummy to suppress unused var warning
            if (jacobian__)
                sigma = in__.vector_lb_constrain(0, M_max, lp__);
            else
                sigma = in__.vector_lb_constrain(0, M_max);

            current_statement_begin__ = 12;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> sds;
            (void) sds;  // dummy to suppress unused var warning
            if (jacobian__)
                sds = in__.vector_lb_constrain(0, T_j, lp__);
            else
                sds = in__.vector_lb_constrain(0, T_j);

            // transformed parameters
            current_statement_begin__ = 18;
            validate_non_negative_index("r_tilde", "T_j", T_j);
            validate_non_negative_index("r_tilde", "J_max", J_max);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> r_tilde(T_j, J_max);
            stan::math::initialize(r_tilde, DUMMY_VAR__);
            stan::math::fill(r_tilde, DUMMY_VAR__);

            current_statement_begin__ = 19;
            validate_non_negative_index("r", "T_j", T_j);
            validate_non_negative_index("r", "J_max", J_max);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> r(T_j, J_max);
            stan::math::initialize(r, DUMMY_VAR__);
            stan::math::fill(r, DUMMY_VAR__);

            current_statement_begin__ = 20;
            validate_non_negative_index("a_tilde", "3", 3);
            validate_non_negative_index("a_tilde", "T_j", T_j);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> a_tilde(3, T_j);
            stan::math::initialize(a_tilde, DUMMY_VAR__);
            stan::math::fill(a_tilde, DUMMY_VAR__);

            // transformed parameters block statements
            current_statement_begin__ = 21;
            for (int t = 1; t <= T_j; ++t) {

                current_statement_begin__ = 22;
                for (int k = 1; k <= 3; ++k) {

                    current_statement_begin__ = 23;
                    stan::model::assign(a_tilde, 
                                stan::model::cons_list(stan::model::index_uni(k), stan::model::cons_list(stan::model::index_uni(t), stan::model::nil_index_list())), 
                                mean(stan::model::rvalue(a, stan::model::cons_list(stan::model::index_uni(k), stan::model::cons_list(stan::model::index_min_max(1, t), stan::model::nil_index_list())), "a")), 
                                "assigning variable a_tilde");
                }
                current_statement_begin__ = 25;
                for (int j = 1; j <= J_max; ++j) {

                    current_statement_begin__ = 26;
                    stan::model::assign(r, 
                                stan::model::cons_list(stan::model::index_uni(t), stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list())), 
                                ((-(1) * ((get_base1(get_base1(a,1,"a",1),t,"a",2) + (get_base1(get_base1(a,2,"a",1),t,"a",2) * j)) + (get_base1(get_base1(a,3,"a",1),t,"a",2) * pow(j, 2)))) * j), 
                                "assigning variable r");
                }
            }

            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning

            current_statement_begin__ = 18;
            size_t r_tilde_j_1_max__ = T_j;
            size_t r_tilde_j_2_max__ = J_max;
            for (size_t j_1__ = 0; j_1__ < r_tilde_j_1_max__; ++j_1__) {
                for (size_t j_2__ = 0; j_2__ < r_tilde_j_2_max__; ++j_2__) {
                    if (stan::math::is_uninitialized(r_tilde(j_1__, j_2__))) {
                        std::stringstream msg__;
                        msg__ << "Undefined transformed parameter: r_tilde" << "(" << j_1__ << ", " << j_2__ << ")";
                        stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable r_tilde: ") + msg__.str()), current_statement_begin__, prog_reader__());
                    }
                }
            }
            current_statement_begin__ = 19;
            size_t r_j_1_max__ = T_j;
            size_t r_j_2_max__ = J_max;
            for (size_t j_1__ = 0; j_1__ < r_j_1_max__; ++j_1__) {
                for (size_t j_2__ = 0; j_2__ < r_j_2_max__; ++j_2__) {
                    if (stan::math::is_uninitialized(r(j_1__, j_2__))) {
                        std::stringstream msg__;
                        msg__ << "Undefined transformed parameter: r" << "(" << j_1__ << ", " << j_2__ << ")";
                        stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable r: ") + msg__.str()), current_statement_begin__, prog_reader__());
                    }
                }
            }
            current_statement_begin__ = 20;
            size_t a_tilde_j_1_max__ = 3;
            size_t a_tilde_j_2_max__ = T_j;
            for (size_t j_1__ = 0; j_1__ < a_tilde_j_1_max__; ++j_1__) {
                for (size_t j_2__ = 0; j_2__ < a_tilde_j_2_max__; ++j_2__) {
                    if (stan::math::is_uninitialized(a_tilde(j_1__, j_2__))) {
                        std::stringstream msg__;
                        msg__ << "Undefined transformed parameter: a_tilde" << "(" << j_1__ << ", " << j_2__ << ")";
                        stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable a_tilde: ") + msg__.str()), current_statement_begin__, prog_reader__());
                    }
                }
            }

            // model body

            current_statement_begin__ = 31;
            lp_accum__.add(gamma_log<propto__>(sigma, 0.001, 0.001));
            current_statement_begin__ = 32;
            lp_accum__.add(gamma_log<propto__>(sds, 0.001, 0.001));
            current_statement_begin__ = 34;
            for (int t = 1; t <= T_j; ++t) {

                current_statement_begin__ = 35;
                for (int m = 1; m <= M_max; ++m) {

                    current_statement_begin__ = 36;
                    if (as_bool(logical_gt(get_base1(get_base1(P,t,"P",1),m,"P",2), 0))) {

                        current_statement_begin__ = 37;
                        lp_accum__.add(normal_log<propto__>(get_base1(get_base1(P,t,"P",1),m,"P",2), multiply(stan::model::rvalue(S, stan::model::cons_list(stan::model::index_uni(t), stan::model::cons_list(stan::model::index_uni(m), stan::model::cons_list(stan::model::index_min_max(1, J_max), stan::model::nil_index_list()))), "S"), transpose(stan::math::exp(stan::model::rvalue(r, stan::model::cons_list(stan::model::index_uni(t), stan::model::cons_list(stan::model::index_min_max(1, J_max), stan::model::nil_index_list())), "r")))), get_base1(sigma,m,"sigma",1)));
                    }
                }
                current_statement_begin__ = 45;
                for (int k = 1; k <= 3; ++k) {

                    current_statement_begin__ = 46;
                    lp_accum__.add(normal_log<propto__>(get_base1(get_base1(a,k,"a",1),t,"a",2), get_base1(get_base1(a_tilde,k,"a_tilde",1),t,"a_tilde",2), get_base1(sds,t,"sds",1)));
                }
            }

        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        lp_accum__.add(lp__);
        return lp_accum__.sum();

    } // log_prob()

    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }


    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("a");
        names__.push_back("sigma");
        names__.push_back("sds");
        names__.push_back("r_tilde");
        names__.push_back("r");
        names__.push_back("a_tilde");
    }


    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dims__.push_back(3);
        dims__.push_back(T_j);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(M_max);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(T_j);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(T_j);
        dims__.push_back(J_max);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(T_j);
        dims__.push_back(J_max);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(3);
        dims__.push_back(T_j);
        dimss__.push_back(dims__);
    }

    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        typedef double local_scalar_t__;

        vars__.resize(0);
        stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
        static const char* function__ = "model_yield_wprior_model_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning

        // read-transform, write parameters
        Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> a = in__.matrix_lub_constrain(-(1), 1, 3, T_j);
        size_t a_j_2_max__ = T_j;
        size_t a_j_1_max__ = 3;
        for (size_t j_2__ = 0; j_2__ < a_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < a_j_1_max__; ++j_1__) {
                vars__.push_back(a(j_1__, j_2__));
            }
        }

        Eigen::Matrix<double, Eigen::Dynamic, 1> sigma = in__.vector_lb_constrain(0, M_max);
        size_t sigma_j_1_max__ = M_max;
        for (size_t j_1__ = 0; j_1__ < sigma_j_1_max__; ++j_1__) {
            vars__.push_back(sigma(j_1__));
        }

        Eigen::Matrix<double, Eigen::Dynamic, 1> sds = in__.vector_lb_constrain(0, T_j);
        size_t sds_j_1_max__ = T_j;
        for (size_t j_1__ = 0; j_1__ < sds_j_1_max__; ++j_1__) {
            vars__.push_back(sds(j_1__));
        }

        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;

        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        if (!include_tparams__ && !include_gqs__) return;

        try {
            // declare and define transformed parameters
            current_statement_begin__ = 18;
            validate_non_negative_index("r_tilde", "T_j", T_j);
            validate_non_negative_index("r_tilde", "J_max", J_max);
            Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> r_tilde(T_j, J_max);
            stan::math::initialize(r_tilde, DUMMY_VAR__);
            stan::math::fill(r_tilde, DUMMY_VAR__);

            current_statement_begin__ = 19;
            validate_non_negative_index("r", "T_j", T_j);
            validate_non_negative_index("r", "J_max", J_max);
            Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> r(T_j, J_max);
            stan::math::initialize(r, DUMMY_VAR__);
            stan::math::fill(r, DUMMY_VAR__);

            current_statement_begin__ = 20;
            validate_non_negative_index("a_tilde", "3", 3);
            validate_non_negative_index("a_tilde", "T_j", T_j);
            Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> a_tilde(3, T_j);
            stan::math::initialize(a_tilde, DUMMY_VAR__);
            stan::math::fill(a_tilde, DUMMY_VAR__);

            // do transformed parameters statements
            current_statement_begin__ = 21;
            for (int t = 1; t <= T_j; ++t) {

                current_statement_begin__ = 22;
                for (int k = 1; k <= 3; ++k) {

                    current_statement_begin__ = 23;
                    stan::model::assign(a_tilde, 
                                stan::model::cons_list(stan::model::index_uni(k), stan::model::cons_list(stan::model::index_uni(t), stan::model::nil_index_list())), 
                                mean(stan::model::rvalue(a, stan::model::cons_list(stan::model::index_uni(k), stan::model::cons_list(stan::model::index_min_max(1, t), stan::model::nil_index_list())), "a")), 
                                "assigning variable a_tilde");
                }
                current_statement_begin__ = 25;
                for (int j = 1; j <= J_max; ++j) {

                    current_statement_begin__ = 26;
                    stan::model::assign(r, 
                                stan::model::cons_list(stan::model::index_uni(t), stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list())), 
                                ((-(1) * ((get_base1(get_base1(a,1,"a",1),t,"a",2) + (get_base1(get_base1(a,2,"a",1),t,"a",2) * j)) + (get_base1(get_base1(a,3,"a",1),t,"a",2) * pow(j, 2)))) * j), 
                                "assigning variable r");
                }
            }

            if (!include_gqs__ && !include_tparams__) return;
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning

            // write transformed parameters
            if (include_tparams__) {
                size_t r_tilde_j_2_max__ = J_max;
                size_t r_tilde_j_1_max__ = T_j;
                for (size_t j_2__ = 0; j_2__ < r_tilde_j_2_max__; ++j_2__) {
                    for (size_t j_1__ = 0; j_1__ < r_tilde_j_1_max__; ++j_1__) {
                        vars__.push_back(r_tilde(j_1__, j_2__));
                    }
                }
                size_t r_j_2_max__ = J_max;
                size_t r_j_1_max__ = T_j;
                for (size_t j_2__ = 0; j_2__ < r_j_2_max__; ++j_2__) {
                    for (size_t j_1__ = 0; j_1__ < r_j_1_max__; ++j_1__) {
                        vars__.push_back(r(j_1__, j_2__));
                    }
                }
                size_t a_tilde_j_2_max__ = T_j;
                size_t a_tilde_j_1_max__ = 3;
                for (size_t j_2__ = 0; j_2__ < a_tilde_j_2_max__; ++j_2__) {
                    for (size_t j_1__ = 0; j_1__ < a_tilde_j_1_max__; ++j_1__) {
                        vars__.push_back(a_tilde(j_1__, j_2__));
                    }
                }
            }
            if (!include_gqs__) return;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }

    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng, params_r_vec, params_i_vec, vars_vec, include_tparams, include_gqs, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }

    static std::string model_name() {
        return "model_yield_wprior_model";
    }


    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t a_j_2_max__ = T_j;
        size_t a_j_1_max__ = 3;
        for (size_t j_2__ = 0; j_2__ < a_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < a_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "a" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t sigma_j_1_max__ = M_max;
        for (size_t j_1__ = 0; j_1__ < sigma_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "sigma" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t sds_j_1_max__ = T_j;
        for (size_t j_1__ = 0; j_1__ < sds_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "sds" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }

        if (!include_gqs__ && !include_tparams__) return;

        if (include_tparams__) {
            size_t r_tilde_j_2_max__ = J_max;
            size_t r_tilde_j_1_max__ = T_j;
            for (size_t j_2__ = 0; j_2__ < r_tilde_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < r_tilde_j_1_max__; ++j_1__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "r_tilde" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            size_t r_j_2_max__ = J_max;
            size_t r_j_1_max__ = T_j;
            for (size_t j_2__ = 0; j_2__ < r_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < r_j_1_max__; ++j_1__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "r" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            size_t a_tilde_j_2_max__ = T_j;
            size_t a_tilde_j_1_max__ = 3;
            for (size_t j_2__ = 0; j_2__ < a_tilde_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < a_tilde_j_1_max__; ++j_1__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "a_tilde" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
        }

        if (!include_gqs__) return;
    }


    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t a_j_2_max__ = T_j;
        size_t a_j_1_max__ = 3;
        for (size_t j_2__ = 0; j_2__ < a_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < a_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "a" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t sigma_j_1_max__ = M_max;
        for (size_t j_1__ = 0; j_1__ < sigma_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "sigma" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t sds_j_1_max__ = T_j;
        for (size_t j_1__ = 0; j_1__ < sds_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "sds" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }

        if (!include_gqs__ && !include_tparams__) return;

        if (include_tparams__) {
            size_t r_tilde_j_2_max__ = J_max;
            size_t r_tilde_j_1_max__ = T_j;
            for (size_t j_2__ = 0; j_2__ < r_tilde_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < r_tilde_j_1_max__; ++j_1__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "r_tilde" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            size_t r_j_2_max__ = J_max;
            size_t r_j_1_max__ = T_j;
            for (size_t j_2__ = 0; j_2__ < r_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < r_j_1_max__; ++j_1__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "r" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            size_t a_tilde_j_2_max__ = T_j;
            size_t a_tilde_j_1_max__ = 3;
            for (size_t j_2__ = 0; j_2__ < a_tilde_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < a_tilde_j_1_max__; ++j_1__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "a_tilde" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
        }

        if (!include_gqs__) return;
    }

}; // model

}  // namespace

typedef model_yield_wprior_model_namespace::model_yield_wprior_model stan_model;

